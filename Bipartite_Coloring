//------------------------------------------------------------------------------
-> collect possible maximum bi-coloring from full graph

#include<bits/stdc++.h>
using namespace std;
#define ll  long long
#define pb  push_back
#define all(x) (x).begin(), (x).end()
#define  gcd(a,b)  __gcd(a,b)
#define    lcm(a,b)  (a*b)/__gcd(a,b)
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

const ll MX=1e5+5;
vector<ll> adj[MX];
vector<bool>vis(MX,0);
ll black=0,white=0;

void dfs(ll u, ll color){
    vis[u]=1;
    if(color==1) white++;
    else black++;
    for(auto x:adj[u]){
        if(!vis[x]) dfs(x,1-color);
    }
}
void solve(){
    for(ll i=0; i<MX; i++){
        adj[i].clear();
        vis[i]=0;
    }
    ll n=0,m; cin>>m;
    while(m--){
        ll u,v; cin>>u>>v;
        adj[u].pb(v);
        adj[v].pb(u);
        n=max(n,max(u,v));
    }
    ll ans=0;
    for(ll i=1; i<=n; i++){
        black=0,white=0;
        if(!vis[i]&&!adj[i].empty()){
            dfs(i,1);
        }
        ans+=max(black,white);
    }
    cout<<ans<<endl;
}

signed main()
{
    optimize();
    ll t=1;
    cin>>t;
    for(ll i=1; i<=t; i++){
        cout<<"Case "<<i<<": ";
        solve();
    }
    return 0;
}


//--------------------------------------------------------------

-> Given connected component is Bipartite or not?

#include<bits/stdc++.h>
using namespace std;
#define ll  long long
#define pb  push_back
#define all(x) (x).begin(), (x).end()
#define  gcd(a,b)  __gcd(a,b)
#define    lcm(a,b)  (a*b)/__gcd(a,b)
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

const ll mx=205;
vector<ll> adj[mx];
ll color[mx];
ll n,l;

bool bfs(ll s){
    queue<ll>q;
    q.push(s);
    color[s]=1;
    while(!q.empty()){
        ll x=q.front();
        q.pop();
        for(auto u:adj[x]){
            if(color[u]==-1){
                if(color[x]==1) color[u]=2;
                else color[u]=1;
                q.push(u);
            }
            else if(color[u]==color[x]){
                return false;
            }
        }
    }
    return true;
}

int main()
{
    optimize();
    while(cin>>n){
        if(n==0) break;
        for(ll i=0; i<n; i++){
            adj[i].clear();
            color[i]=-1;
        }
        cin>>l;
        for(ll i=0; i<l; i++){
            ll u,v; cin>>u>>v;
            adj[u].pb(v);
            adj[v].pb(u);
        }
        if(bfs(0)) cout<<"BICOLORABLE.\n";
        else cout<<"NOT BICOLORABLE.\n";
    }
    return 0;
}
