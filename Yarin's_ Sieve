#include <bits/stdc++.h>
using namespace std;

const int N = 1e7; // Change as needed (e.g., 1e8 is ~800 MB of RAM)
bitset<N / 2> is_prime; // only store odd indices

vector<int> primes;

void yarin_sieve() {
    is_prime.set(); // set all to true
    int limit = sqrt(N) + 1;

    for (int i = 3; i <= limit; i += 2) {
        if (is_prime[i >> 1]) {
            for (int j = i * i; j < N; j += i << 1)
                is_prime[j >> 1] = 0;
        }
    }

    primes.push_back(2);
    for (int i = 3; i < N; i += 2) {
        if (is_prime[i >> 1])
            primes.push_back(i);
    }
}

int main() {
    yarin_sieve();
    //cout << "Total primes <= " << N << ": " << primes.size() << "\n";
    for (int p : primes) cout << p << " ";
    return 0;
}
